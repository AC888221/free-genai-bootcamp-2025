---
description: Rules for react code
globs: 
---
Sure! Here is the corrected document entirely in Markdown format:

```markdown
# React Development Guidelines for Junior Developers

## Component Structure
- **Use Functional Components:** Prefer functional components with hooks over class components.
  ```javascript
  // Good:
  const MyComponent = () => {
    // component logic
    return <div>My Component</div>;
  };

  // Bad:
  class MyComponent extends React.Component {
    render() {
      return <div>My Component</div>;
    }
  }
  ```

- **Single Responsibility Principle:** Each component should have a single responsibility and be as small as possible.

## State Management
- **Local State:** Use `useState` for managing local state within a component.
  ```javascript
  const [count, setCount] = useState(0);
  ```

- **Global State:** Use context or state management libraries (e.g., Redux) for managing global state.

## Props and PropTypes
- **Define PropTypes:** Use `propTypes` to enforce type checking for component props.
  ```javascript
  MyComponent.propTypes = {
    title: PropTypes.string.isRequired,
    count: PropTypes.number,
  };
  ```

- **Default Props:** Use `defaultProps` to provide default values for optional props.
  ```javascript
  MyComponent.defaultProps = {
    count: 0,
  };
  ```

## Styling
- **CSS-in-JS:** Use CSS-in-JS libraries (e.g., styled-components) or CSS modules for styling.
  ```javascript
  const StyledButton = styled.button`
    background-color: blue;
    color: white;
  `;
  ```

- **Consistent Naming:** Follow a consistent naming convention for CSS classes.

## Hooks
- **Rules of Hooks:** Follow the rules of hooks (e.g., only call hooks at the top level).
  ```javascript
  // Good:
  const MyComponent = () => {
    const [state, setState] = useState(initialState);
    // other hooks
  };

  // Bad:
  if (condition) {
    const [state, setState] = useState(initialState); // Don't call hooks inside conditions
  }
  ```

- **Custom Hooks:** Create custom hooks for reusable logic.
  ```javascript
  const useCustomHook = () => {
    // custom hook logic
  };
  ```

## Code Organization
- **Folder Structure:** Organize components in a logical folder structure (e.g., by feature or domain).
  ```
  src/
    components/
    hooks/
    pages/
    utils/
  ```

- **Separate Files:** Keep utility functions and custom hooks in separate files.

## Testing
- **Unit Tests:** Write unit tests for all components using testing libraries like Jest and React Testing Library.
  ```javascript
  test('renders component', () => {
    render(<MyComponent />);
    expect(screen.getByText('My Component')).toBeInTheDocument();
  });
  ```

- **High Coverage:** Ensure high test coverage for critical components and functions.

## Performance
- **Optimize Performance:** Use `React.memo` and `useCallback` to optimize performance.
  ```javascript
  const MemoizedComponent = React.memo(MyComponent);
  ```

- **Avoid Re-renders:** Avoid unnecessary re-renders by using key props and memoization.

## Accessibility
- **Semantic HTML:** Follow accessibility best practices (e.g., using semantic HTML elements).
  ```javascript
  // Good:
  <button>Click me</button>

  // Bad:
  <div onClick={handleClick}>Click me</div>
  ```

- **ARIA Attributes:** Use ARIA attributes where necessary to improve accessibility.

## Documentation
- **Comment Code:** Document components and hooks with comments explaining their purpose and usage.
  ```javascript
  /**
   * MyComponent displays a greeting message.
   * @param {string} name - The name to greet.
   */
  const MyComponent = ({ name }) => {
    return <div>Hello, {name}!</div>;
  };
  ```

- **Consistent Format:** Maintain a consistent format for documentation.